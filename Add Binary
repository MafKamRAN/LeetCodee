class Solution {
public:
    string addBinary(string a, string b) {
        int m = a.size();
        int n = b.size();
        string result = "";
        int carry = 0;
        
        // Traverse both strings from end to start
        int i = m - 1, j = n - 1;
        while (i >= 0 || j >= 0) {
            int digit_a = (i >= 0) ? a[i--] - '0' : 0;
            int digit_b = (j >= 0) ? b[j--] - '0' : 0;
            
            // Calculate sum of current digits and carry
            int digit_sum = digit_a + digit_b + carry;
            result += to_string(digit_sum % 2); // Append the sum digit
            
            // Update carry for the next iteration
            carry = digit_sum / 2;
        }
        
        // If there's any carry left, append it to the result
        if (carry > 0) {
            result += to_string(carry);
        }
        
        // Reverse the result to get the correct binary sum
        reverse(result.begin(), result.end());
        
        return result;
    }
};
