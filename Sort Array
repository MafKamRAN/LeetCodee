class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        sortArrayHelper(nums, 0, nums.size() - 1);
        return nums;
    }
private:
    void sortArrayHelper(vector<int>& nums, int l, int r) {
        if (l < r) {
            int mid = l + (r - l) / 2;
            sortArrayHelper(nums, l, mid);
            sortArrayHelper(nums, mid + 1, r);
            mergeSort(nums, l, mid, r);
        }
    }

    void mergeSort(vector<int>& nums, int l, int mid, int r) {
        int n1 = mid - l + 1;
        int n2 = r - mid;
        vector<int> left(n1), right(n2);
        for (int i = 0; i < n1; i++) {
            left[i] = nums[l + i];
        }
        for (int i = 0; i < n2; i++) {
            right[i] = nums[mid + 1 + i];
        }
        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                nums[k] = left[i];
                i++;
            } else {
                nums[k] = right[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            nums[k] = left[i];
            i++;
            k++;
        }
        while (j < n2) {
            nums[k] = right[j];
            j++;
            k++;
        }
    }
};
