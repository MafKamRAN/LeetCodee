class Solution{
public:
int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
    vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
    for (auto& edge : edges) {
        dist[edge[0]][edge[1]] = edge[2];
        dist[edge[1]][edge[0]] = edge[2];
    }
    for (int i = 0; i < n; ++i) {
        dist[i][i] = 0;
    }
    
    // Floyd-Warshall algorithm
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dist[i][k] < INT_MAX && dist[k][j] < INT_MAX) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }
    int minReachableCities = INT_MAX;
    int resultCity = -1;
    for (int i = 0; i < n; ++i) {
        int reachableCities = 0;
        for (int j = 0; j < n; ++j) {
            if (i != j && dist[i][j] <= distanceThreshold) {
                ++reachableCities;
            }
        }
        if (reachableCities <= minReachableCities) {
            if (reachableCities == minReachableCities) {
                resultCity = max(resultCity, i);
            } else {
                resultCity = i;
            }
            minReachableCities = reachableCities;
        }
    }
    
    return resultCity;
}
};
